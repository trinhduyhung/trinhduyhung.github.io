[{"content":"","href":"/tags/java/","title":"java"},{"content":"","href":"/posts/","title":"Posts"},{"content":"","href":"/","title":"Programming thoughts"},{"content":"","href":"/tags/","title":"Tags"},{"content":"While reading the Java language specification (JLS 14), I immediately pay attention to the chapter 5 where it describes how widening and narrowing for primitive data types works in Java. It\u0026rsquo;s because I\u0026rsquo;m always interested in somethings that go behind the sense, somethings that are at a low level, for example things related to binary representation of data.\nJava has the following primitive data types that are summarized in a table like so:\n   Type Description Size Range Default value     byte two\u0026rsquo;s complement integer 1 byte whole numbers from -128 to 127 0   short two\u0026rsquo;s complement integer 2 bytes whole numbers from -32,768 to 32,767 0   int two\u0026rsquo;s complement integer 4 bytes whole numbers from -2,147,483,648 to 2,147,483,647 0   long two\u0026rsquo;s complement integer 8 bytes whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 0L   float IEEE 754 floating point 4 bytes approximately ±3.40282347E+38F (6-7 significant decimal digits) 0.0f   double IEEE 754 floating point 8 bytes approximately ±1.79769313486231570E+308 (15 significant decimal digits) 0.0d   char single Unicode character 2 bytes Unicode character from \u0026lsquo;\\u000\u0026rsquo; (or 0) to \u0026lsquo;\\uffff\u0026rsquo; (or 65,535 inclusive) \u0026lsquo;\\u0000\u0026rsquo;   boolean true or false 1 bit true and false false    Widening happens implicitly when converting a smaller type to a larger size type:\n  byte to short, int, long, float, or double\n  short to int, long, float, or double\n  char to int, long, float, or double\n  int to long, float, or double\n  long to float or double\n  float to double\n  Narrowing happens explicitly by using the keyword cast when converting a larger type to a smaller size type:\n  short to byte or char\n  char to byte or short\n  int to byte, short, or char\n  long to byte, short, char, or int\n  float to byte, short, char, int, or long\n  double to byte, short, char, int, long, or float\n  Let me introduce some examples to see how some of these work.\nWidening conversion from byte to int\npublic class Main { public static void main(String[] args) { int largeNumber; byte smallNumber = 10; largeNumber = smallNumber; System.out.println(largeNumber); } } In this case, after the assignment largeNumber = smallNumber the largeNumber will be having the value 10 meaning the conversion happens without losing information. This is because a byte data type takes up just one byte so it can fit within an int data type that takes up 4 bytes without issues.\nSign extension\n A widening conversion of a signed integer value to an integral type T simply sign extends the two\u0026rsquo;s-complement representation of the integer value to fill the wider format. \u0026ndash; JLS14\n Let\u0026rsquo;s consider the above example to see how sign extension works in this case.\nThe two\u0026rsquo;s-complement representation of a byte data type with value of 10 is 00001010(8 bits here because of abyte data type). The sign bit is the most significant bit or the leftmost bit, in this case is 0. To retrieve the converted value of 10 in the int data type, the sign extension will fill all the extra bits on the left of the 8 bits representation until the result reaches 32 bits in length (because the size of an int is 32 bits). This results in 00000000 00000000 00000000 00001010. This is the two\u0026rsquo;s-complement representation of 10 as an int.\nIf the smallNumber was initialized with -10 then the two\u0026rsquo;s-complement representation of it is 11110110, thus the sign bit (left most bit) is 1. The sign extension will fill all the extra bits on the left of this representation with bit 1 until the result reaches 32 bits in length. In result, 11111111 11111111 11111111 11110110wil be produced as the two\u0026rsquo;s-complement representation of -10.\nchar data type is a special one\nLet\u0026rsquo;s talk a bout how a char data type is represented in Java. A char is used to represent a single Unicode character using the UTF-16 character encoding format. In UTF-16 each character is represented using a notion of a prefix U+ plus some designated hexadecimal number. This notion is called the code point of the character. For example the character 最 has the code point U+6700. In Java this character can be represented using 2 bytes: 0x67 and 0x00 and stored in a char variable. The binary representation of the code point for this character is 110011100000000 which is called a code unit. Let\u0026rsquo;s see a code example:\npublic class Main { public static void main(String[] args) { char c = \u0026#39;\\u6700\u0026#39;; System.out.println(c); } } Running the code above will output the 最 in the console.\nSince 110011100000000 in binary is 26368 in decimal. You can also using an integer literal 26368 to declare and initialize the character like in the following:\npublic class Main { public static void main(String[] args) { char c = 26368; System.out.println(c); } } Running the code above will also output the 最 in the console.\nWidening conversion from int to float, or from long to float, or from long to double\nSince we\u0026rsquo;re converting from a data type to another one which is of a smaller size: from long to float; or from a data type to another one which is of the same size: from int to float, from long to double but has to hold both the decimal and fractional part, loss of precision might occur.\nLet\u0026rsquo;s see a code example\npublic class Main { public static void main(String[] args) { int big = 1234567890; float approx = big; System.out.println(big - (int)approx); } } Running the code above will output -46 in the console thus indicating that information was lost during the conversion from type int to type float because values of type float are not precise to nine significant digits.\nNarrowing conversion from int to short\nLet\u0026rsquo;s consider a code example\npublic class Main { public static void main(String[] args) { int largerNumber = 99990000; short smallerNumber; smallerNumber = (short) largerNumber; System.out.println(smallerNumber); } } Since 99990000 is outside of the range supported by the short data type, the code without a cast as (short) will not compile. Java forces users to explicitly specify their attention by using a cast because it\u0026rsquo;s a way to signify users of possibility of losing information about the sign and magnitude of the numeric values and also precision as in this case, the result produced by the code to the console is -17936. How come is that?\nIn Java all integral primitive data types including byte, short, int, long are represented in memory using two\u0026rsquo;s-complement representation. The two\u0026rsquo;s-complement representation of 99990000 is 00000101 11110101 10111001 11110000. This is also the 4 bytes of information stored in the memory for an int. When casting to a short which is 2 bytes in size, only 16 least significant bits which is 10111001 11110000 will be kept and other information will be discarded (loss). 10111001 1111000 is the two\u0026rsquo;s complement representation of -17936. That why the result is like what it is.\nSummary: while working with primitive data types in Java, one can face issues of losing information when converting between them either explicitly with a cast or implicitly without it. This loss can result in unexpected errors that are not our intention. To prevent this from happening, a good habit is to keep in mind the range of the data type involved in. Also understanding the two\u0026rsquo;s-complement representation of integral types can really help in some cases.\n","href":"/posts/widening-narrowing-in-java/","title":"Widening and narrowing in Java"},{"content":"","href":"/categories/","title":"Categories"},{"content":"A brief history of Unix It all started in 1969 when Ken Thompson wrote his game named Space Travel that simulates travel in the Solar System. He originally wrote it for use on Multics (Multiplexed Information and Computing Service) operating system, but soon after Bell Labs pulled out of the Multics project, he rewrote it for the obsolete and little-used PDP-7 minicomputer that he found at his neighboring department. While writing this game on the PDP-7, he decided to implement his own base code libraries for the game to use including arithmetic, packages and graphics subsystem. These subsystems were coded in Assembly language on the GECOS (General Comprehensive Operating System) system and assembled. Then the output physically was put on punched tapes to be carried over and inserted into the PDP-7. Thompson then wrote an assembler for the PDP-7 to avoid this tedious process. The game ran slowly on the PDP-7 which caused Thompson to design his own file system based on some ideas from Dennis Ritchie who also worked at Bell Labs and had a lot of experiences with the Multics file system. By the time the game was fully ported to the PDP-7, Thompson had expanded his software craft to a full, basic operating system. The operating system was then named Unix in 1970.\nThe PDP-7 computer had an 18-bit word length (in contrast to modern computers where each of them is nearly eight bit word length) and only four kilo bytes of memory (which is only a small fraction of the capacity of a single modern floppy disk). This extremely small memory was undoubtedly a major factor in Thompson\u0026rsquo;s keeping his operating system extremely small and providing it with an elegant simplicity that has, in turn, played an important role in the great success of it and its various descendants (including Linux).\nUnix systems are characterized by a modular design that is sometimes called the Unix philosophy. According to this philosophy, the operating system should provide a set of simple tools, each of which performs a limited, well-defined function. A unified filesystem (the Unix system) and an inter-process communication mechanism known as \u0026ldquo;pipes\u0026rdquo; serve as the main means of communication, and a shell scripting and command language (the Unix shell) is used to combine the tools to perform complex workflows.\nIn the book The Art of Unix Programming that was first published in 2003, Eric S. Raymond, an American programmer and open source advocate, summarizes the Unix philosophy as KISS Principle of \u0026ldquo;Keep it Simple, Stupid.\u0026rdquo; He provides a series of design rules:\n Build modular programs Write readable programs Use composition Separate mechanisms from policy Write simple programs Write small programs Write transparent programs Write robust programs Make data complicated when required, not the program Build on potential users\u0026rsquo; expected knowledge Avoid unnecessary output Write programs which fail in a way that is easy to diagnose Value developer time over machine time Write abstract programs that generate code instead of writing code by hand Prototype software before polishing it Write flexible and open programs Make the program and protocols extensible.   UNIX is basically a simple operating system, but you have to be a genius to understand the simplicity. \u0026ndash; Dennis Ritchie\n In 1971, the Unix group at Bell Labs attempted to rewrite Unix in a high level programming language so that it would be easier for them to port Unix to other computer architectures. The B programming language was then created. It\u0026rsquo;s the work of Ken Thompson and Dennis Ritchie. The B programming language then became the precursor to the C language, the original version of which was completed by Dennis Ritchie in 1972.\nIn 1972, Thompson rewrote the Unix kernel in C with a minimal Assembly code. In subsequent years, Unix was carried out at the University of California at Berkeley.\nMany variations were then developed and they are collectively referred to as Unix-like operating systems. Unix and Unix-like operating systems are considered as the best ever created in terms of stability, security, flexibility, scalability and elegance.\nIntroduction to Linux In 1991, Linus Torvalds (founder of Linux) while studying at the University of Helsinki (in Finland) was not happy with the MS-DOS operating system. His attempt to retrieve a free licence for Unix failed since Unix was not free. After reading the Operating Systems: Design and Implementation book by Andy Tanenbaum, the book that launched him to new heights, he decided to write his own operating system Linux. Linux eventually became one of the largest open source projects in the world.\nLinux actually is a kernel - a main component of the Linux operating system and is the interface that communicate users (while they use applications installed on the operating system) to the computer\u0026rsquo;s hardware, manage and leverage resources a efficiently as possible.\nThose operating systems that base their code on the Linux kernel are called Linux distributions. There are more than 200 Linux distributions out there among them Red Hat, Ubuntu, Fedora, Debian, Kali Linux, \u0026hellip; are most well-known. Their focus ranges from desktop (client) use to server use, target from beginner users to expert users.\nLinux vs Unix Linux is considered as a clone of Unix since it was developed to mimic Unix but none of it\u0026rsquo;s source code was copied from Unix source code.\nLike Unix, Linux is a multiuser, multitasking, highly flexible, secure and robust operating system.\nUnlike Unix, Linux is a free software. It was released by Linus Torvalds under GNU General Public License. Everyone is permitted to download Linux from the Internet at no cost and to use it for any desired purpose, make copies as many as desired and even redistribute it.\n Software is like sex. It\u0026rsquo;s better when it\u0026rsquo;s free. \u0026ndash; Linus Torvalds\n Linux can run on a wide range of hardware, including handheld devices (including cell phones), game machines, desktop computers, workstations, mainframes, supercomputer, industry robots and even wristwatches.\nLinux is used by individuals, corporations, governments, academic institutions and other organizations. Since Linux\u0026rsquo;s source code is open, everyone can monitor the code for security holes or customize it to suite their need.\nPeople, especially who is studying to become computer professionals, are more and more interested in learning Linux. Having Linux skills is also desirable for many programmers.\n","href":"/posts/introduction-linux/","title":"Introduction to Linux"},{"content":"","href":"/tags/linux/","title":"linux"},{"content":"","href":"/categories/series/","title":"series"},{"content":"","href":"/categories/configuration/","title":"configuration"},{"content":"I just installed MySQL server (version 8.0) into my Ubuntu 20.04 with an empty password for the root user. It has occurred to me that the Access denied for user issue kept spinning my head.\nBecause for every project we use MySQL we always provide username and password to authenticate queries. I needed to change the password and get rid of the Access denied issue.\nSome internet user suggests that changing the password can solve the issue, like the following\nmysql\u0026gt; alter user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; identified by \u0026#39;newPasswd\u0026#39;; But it didn\u0026rsquo;t in my case.\nI want to see if the password was really set.\nI know that the MySQL user information is stored in mysql.user table.\nLet\u0026rsquo;s see what is inside mysql.user table.\n$ sudo mysql -u root -p mysql\u0026gt; use mysql; mysql\u0026gt; desc mysql.user; mysql\u0026gt; select Host, User, authentication_string from mysql.user; The out put of the last query says that the password for the user root is empty (since the authentication_string is empty). So changing password didn\u0026rsquo;t work. But why?\nAfter doing some research, I found out that MySQL server is using something called authentication plugin to authenticate a MySQL client when it tries to connect to the server. In my case, the authentication plugin being used doesn\u0026rsquo;t support a username/password authentication method.\nLet\u0026rsquo;s see what plugin is being used.\nmysql\u0026gt; select User, Host, plugin from mysql.user; The out put is +------------------+-----------------------+ | User | plugin | +------------------+-----------------------+ | root | auth_socket | | mysql.sys | caching_sha2_password | | mysql.infoschema | caching_sha2_password | | mysql.session | caching_sha2_password | | debian-sys-maint | caching_sha2_password | +------------------+-----------------------+ OK, the plugin is auth_socket. It means that MySQL server will check if the client is using a Unix socket and then will compare the username. It just ignores any password provided in the connection URL.\nAfter some time, I figured that the correct way to change the password is to change it and update the authentication plugin at the same time, like in the following:\n$ alter user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; identified with mysql_native_password by \u0026#39;password\u0026#39;; After that, if we double check the plugin we will see something like\n+------------------+-----------------------+ | User | plugin | +------------------+-----------------------+ | root | mysql_native_password | | mysql.sys | caching_sha2_password | | mysql.infoschema | caching_sha2_password | | mysql.session | caching_sha2_password | | debian-sys-maint | caching_sha2_password | +------------------+-----------------------+ mysql_native_password came to the light, that is the familiar old username/password way of authentication.\nThat\u0026rsquo;s all. Happy coding!\n","href":"/posts/mysql-access-denied-1698/","title":"ERROR 1698 (28000): Access denied for user 'root'@'localhost'"},{"content":"","href":"/tags/mysql/","title":"mysql"},{"content":"Sooner or later as a developer, you will find yourself in a situation where you’re working using multiple Github accounts. One is your company account, one is your personal account. In this post, I’m going to share a common approach that can help you achieve that.\nWe will be using ssh as the protocol to authenticate our git requests to Github server because we do not want to enter the password each time we do a git request using username/password authentication. To use ssh we will need a ssh key pair (private/public keys) to authenticate each git request. Your public key will be stored on Github server. It acts as a lock to guard your Github repositories. To access (unlock) the repositories you will need the private key stored on your local machine and acts as the key for that lock. For that reason, you always keep your private key secured.\nGenerate ssh key pair using ssh-keygen On a Linux distribution machine like my Ubuntu machine, you can generate a ssh key pair by using the ssh-keygen command line. After you generated a key pair, you will find it under ~/.ssh directory.\nMaybe in that .ssh directory, you can find some key pairs already there generated by someone else. The key pair normally will be id_rsa for the private key, id_rsa.pub for the public key. If you’re not sure about the key pairs generated before, for example the person who created the key pairs might have secured the key pairs with a passphrase while creating it, then create a new one.\nIn order to do it, run the following command on your terminal:\nssh-keygen -t rsa -C \u0026#34;bob@company.com\u0026#34; -f \u0026#34;id_rsa\u0026#34; When you’re prompted to enter the passphrase, leave it empty.\nThis creates a new ssh key pair, using the provided email as a label and you will find in the ~/.ssh directory 2 new generated files: id_rsa and id_rsa.pub\nSimilarly, let’s generate another key pair for your personal Github account. In order to do it, run the following command on your terminal:\nssh-keygen -t rsa -C \u0026#34;bob@gmail.com\u0026#34; -f \u0026#34;id_rsa_personal\u0026#34; On my machine, this command generates id_rsa_personal and id_rsa_personal.pub files in the current directory where I invoke the command line.\nCopy them to the ~/.ssh directory using the following command:\ncp id_rsa_personal id_rsa_personal.pub ~/.ssh  Be careful because you do not want to overwrite the key pairs generated before in the ~/.ssh directory. To simplify things for this post, I assume that the pair (id_rsa, id_rsa_public) is absent in the ~/.ssh directory.\n Copy the public key content to corresponding Github account Let’s print out on the terminal the content of the public key generated above. Run the following commands:\ncd ~/.ssh cat id_rsa.pub Then copy the output text and login to Github with your personal account. Then go to Settings \u0026gt; SSH and GPG keys \u0026gt; New SSH Key. Copy the output text and paste to the text area on Github. Name it, for example, \u0026ldquo;key generated using company A’s laptop\u0026rdquo;.\n Make sure to name your SSH key something you can remember so that if you need to revoke a key later, you can easily tell which one you’re looking for.\n Register generated key pairs with ssh-agent The ssh-agent acts like a keychain that is responsible for holding the private keys. In addition to holding private keys it also handles signing the authentication data using private keys.\nBefore adding the new SSH key to the ssh-agent, ensure the ssh-agent is running by executing the following command:\neval \u0026#34;$(ssh-agent -s)\u0026#34; Now when the ssh-agent is running, executing the following commands will add the new SSH key to the local ssh agent.\nssh-add -K ~/.ssh/id_rsa ssh-add -K ~/.ssh/id_rsa_personal Configure the ssh key pairs in ~/.ssh/config file Now the fun part. Every time you invoke a git request from your terminal, your git client will look for the private key (it will ask the ssh-agent) and use it to authenticate itself to Github git server. Since you’re having multiple key pairs how the git client would know it?\nIt turns out, when the git client invokes a git request using ssh protocol, it can look at a config file at ~/.ssh directory named config. If it’s not there already, create one. Create a file named \u0026ldquo;config\u0026rdquo; with the following content:\nHost company HostName github.com User git IdentityFile ~/.ssh/id_rsa Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa_personal Save it.\nNow company becomes a custom host name for the Github URL corresponding to your company Github account. Later as you will see, you will be naming your remote git repository in conjunction with this host name. In the configuration file, we map this custom host name to the id_rsa key.\nConfigure the git user name and email information This is important because you’re having two emails: personal and company. Github identifies the author of any commit from the email attached with the commit. We need to tell git the proper information for the author. You can use the git commands like the following:\ngit config --global user.name \u0026#34;Bob\u0026#34; git config --global user.email bob@company.com to configure the proper information. The option \u0026ndash;global can be substituted with \u0026ndash;system or \u0026ndash;local depending on your user case.\n-\u0026gt;In my case, the system-wide configuration is empty. I used the global configuration, so that if the local configuration is empty then the name and email are set to my name and my company email.\nA little bit about git configuration Git looks for the configuration information in 3 possible places:\nFirst, the system-wide /etc/gitconfig file, which contains settings that are applied to every user on the system and all of their repositories. You can make Git read and write to this file by passing the \u0026ndash;system option.\nSecond, the ~/.gitconfig (or ~/.config/git/config) file, which is specific to each user. You can make Git read and write to this file by passing the \u0026ndash;global option.\nFinally, the .git/config file of whatever repository you’re currently using. These values are specific to that single repository only. You can make Git read and write to this file by passing the \u0026ndash;local option. (If you don’t specify which level you want to work with, this is the default.)\nAs a rule of thumb, git always looks at things from the narrowest place which is local, then home, then system-wide.\nIn my case, the /etc/config is already set with my company account name and email so I will configure the user.name and user.email using \u0026ndash;local option.\nThe following command line will show all inherited values from: system, global and local\ngit config -l User case 1: you want to clone your company project from Github Let\u0026rsquo;s say your company Github repository URL is something like (you can get this URL from Github) Turn it into something that your local machine can understand it  Companies usually setup multiple repositories under a company repository name or a team repository name. In the command above, company-repo means the company repository name.\n Clone your company repository by running the following command:\ngit clone git@company:your-company-github-username/company-repo/remote-repo-name.git It should then clone the repository to a directory named \u0026ldquo;remote-repo-name\u0026rdquo; inside your current directory.\nUser case 2: your company project (on your local machine) is not tracked by git yet and you want to push it upstream Let’s say your company project is located in the \u0026ldquo;company-project\u0026rdquo; directory. On your terminal run the following commands:\ncd company-project git remote add origin git@company:your-company-github-username/company-repository.git git push origin master User case 3: your company project was cloned by using username/password authentication Run the following commands on your terminal:\ncd company-project git remote set-URL origin git@company:your-company-github-username/remote-repo-name.git Verify that the remote URL has changed:\ngit remote -v \u0026gt; origin git@company:your-company-github-username/remote-repo-name.git (fetch) \u0026gt; origin git@company:your-company-github-username/remote-repo-name.git (push) Where \u0026ldquo;remote-repo-name\u0026rdquo; is the name of your project’s repository on Github.\nUser case 4: you want to clone your personal project from Github Let\u0026rsquo;s say your personal Github repository URL is something like (you can get this URL from Github)\nTurn it into something that your local machine can understand it\nClone your company repository by running the following command:\ngit clone git@github.com:your-personal-github-username/remote-repo-name.git It should then clone the repository to a directory named \u0026ldquo;remote-repo-name\u0026rdquo; inside your current directory.\nGo into this directory and configure the user.name and user.email information. On your terminal, run the following commands:\ncd remote-repo-name git config --local user.name \u0026#34;Bob\u0026#34; git config --local user.email bob@gmail.com  Because I already set the global configuration to my name and my company email. This local configuration is desirable.\n User case 5: your personal project (on your local machine) is not tracked by git yet and you want to push it upstream Let’s say your personal project is located in a directory named \u0026ldquo;my-repository\u0026rdquo; and you want to push it to Github using your personal Github account.\nGo into this directory and configure the user.name and user.email information. On your terminal, run the following commands:\ncd my-repository git config --local user.name \u0026#34;Bob\u0026#34; git config --local user.email bob@gmail.com  Because I already set the global configuration to my name and my company email. This local configuration is desirable.\n Initialize a git repository inside it:\ncd my-repository git init Add necessary files to your staging area:\ngit add *  As an example, the command above adds all your project\u0026rsquo;s files to the staging area\n Make your first commit to your local repository\ngit commit -m \u0026#34;first commit\u0026#34; Now go to Github and create a new repository named \u0026ldquo;my-repository\u0026rdquo; using your personal Github account.\nNow go back to your terminal and run the following commands:\ngit remote add origin git@github.com:your-personal-github-username/my-repository.git git push origin master That’s all. Happy coding!\n","href":"/posts/multiple-github-accounts/","title":"Configure multiple Github accounts on a single machine"},{"content":"","href":"/tags/github/","title":"github"},{"content":"","href":"/search/","title":""}]
